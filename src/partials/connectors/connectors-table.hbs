<section class="connectors-table-wrapper">
  <table id="connectors-table" class="connectors-table">
{{> connectors-search}}
    <tbody></tbody>
  </table>
</section>
<template id="connectors-row" class="hidden">
<tr class="tr">
  <td class="td">
    <img loading="lazy" src="" class="img js-connector-icon" width="30" alt="icon">
  </td>
  <td class="td js-connector-title"><a class="link js-connector-link" href="#"></a></td>
  <td class="td js-connector-type"></td>
</tr>
</template>
<script nonce="**CSP_NONCE**" id="connectors-data" type="application/json">
[
  {{#each (connectors) as |connector|}}
  {{#with asciidoc}}
  {
    "title": "{{connector.title}}",
    "type": "{{attributes.page-connector-type}}",
    "iconURL":
    {{#if (and attributes.page-connector-icon-override attributes.page-connector-icon-url)}}
      "{{attributes.page-connector-icon-url}}"
    {{else if (and (not attributes.page-connector-icon-override) (and attributes.page-exchange-group-id attributes.page-exchange-asset-id))}}
      "https://www.mulesoft.com/exchange/organizations/68ef9520-24e9-4cf2-b2f5-620025690913/assets/{{attributes.page-exchange-group-id}}/{{attributes.page-exchange-asset-id}}/icon/{{#if (not (is-null attributes.page-icon-extension))}}{{attributes.page-icon-extension}}{{else}}svg{{/if}}/"
    {{else}}
      "{{@root.uiRootPath}}/img/icons/connectors.svg"
    {{/if}},
    {{#if attributes.page-exchange-asset-id}}
    "exchangeURL": "https://www.mulesoft.com/exchange/{{attributes.page-exchange-group-id}}/{{attributes.page-exchange-asset-id}}/",
    {{/if}}
    {{#with (resolvePageURL attributes.page-release-notes-page)}}
    "releaseNotesPageURL": "{{relativize this}}",
    {{else}}
    {{/with}}
    {{#with connector.latest as |latest|}}
    "latestVersion": {
      "version": "{{latest.version}}",
      "url": "{{relativize latest.url}}"
    }
    {{/with}}
  }{{#unless @last}},{{/unless}}
  {{/with}}
  {{/each}}
]
</script>
<script nonce="**CSP_NONCE**">//<![CDATA[
;(function () {
  populateConnectorsTable()

  function populateConnectorsTable (e) {
    var table = document.getElementById('connectors-table')
    var search = table.querySelector('thead')
    var criteria = {
      title: search.querySelector('.js-connector-title'),
      type: search.querySelector('.js-connector-type'),
    }
    if (e) {
      criteria.title = criteria.title.value.toLowerCase()
      criteria.type = criteria.type.value
    } else {
      criteria.title.value = ''
      criteria.title.addEventListener('keyup', debounce(populateConnectorsTable, 250))
      criteria.type.value = ''
      criteria.type.addEventListener('change', populateConnectorsTable)
      criteria = {}
    }
    var slot = table.querySelector('tbody')
    var tmpl = document.getElementById('connectors-row')
    var rows = JSON.parse(document.getElementById('connectors-data').textContent).reduce(function (accum, connector) {
      var connector_title = connector.title.replace(new RegExp(' ' + connector.type + '$'), '')
      if ((criteria.title && !connector_title.toLowerCase().includes(criteria.title)) ||
          (criteria.type && !connector.type.includes(criteria.type))) return accum
      var row = document.importNode(tmpl.content.querySelector('tr'), true)
      row.dataset.href = connector.latestVersion.url
      row.querySelector('.js-connector-icon').src = connector.iconURL
      row.querySelector('.js-connector-icon').alt = '[icon]'
      row.querySelector('.js-connector-link').textContent = connector_title
      row.querySelector('.js-connector-link').href = connector.latestVersion.url
      row.querySelector('.js-connector-type').textContent = connector.type

      return accum.concat(row)
    }, [])
    slot.innerHTML = ''
    if (!rows.length) return
    rows.forEach(function (row) {
      slot.appendChild(row)
      row.addEventListener('click', function (clickEvent) {
        var currentNode = clickEvent.target
        var currentTagName = undefined
        while (currentNode && (currentTagName = currentNode.tagName) !== 'TR') {
          if (currentTagName === 'A' || currentTagName === 'BUTTON') {
            currentNode = undefined
            break
          }
          currentNode = currentNode.parentNode
        }
        if (currentNode) window.location.href = currentNode.dataset.href
      })
    })
  }

  function debounce (fn, wait) {
    var timeout
    return function () {
      if (timeout) clearTimeout(timeout)
      var self = this
      var args = arguments
      timeout = setTimeout(function () {
        timeout = undefined
        fn.apply(self, args)
      }, wait)
    }
  }
})()
//]]></script>